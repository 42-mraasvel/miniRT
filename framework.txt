Raytracing/Scene rendering

Loop:

	1. Get the direction vector from the camera to the pixel:
		- Set up a new coordinate system with the Camera as the origin.
		- Z-axis = Orientation Vector.
		- X-axis points to the "right", and Y-axis points "up".
		- Loop through each pixel (Width * Height pixels)
	2. Function that takes the origin and direction vector, and calculates the nearest (if any) intersection, checking all objects in the scene.
	3. Use these 3D-coordinates of the pixel to calculate an intersection between objects:
		1. Sphere Intersection (Center_Sphere, Radius, Ray_Origin, Ray_Direction)
	4. Trace 





Algorithm For MiniRT

1. Check program arguments (rt file and --save option)
2. Read in the scene from the rt file.
	- Capital definitions can only be declared once in the scene
3. Render the scene
4. Display scene on MLX window or save to bmp file
5. Exit program cleanly


Rendering the scene:

	For each Pixel p in the window: (i, j) and (x, y)
	{
		1. Associate a black color to p
		2. 'trace' the ray from the camera to p, if it intersects any object then
		{
			1. calculate the intersection point to the nearest object
			2. If there is an intersection, follow a slightly shifted point from the nearest intersection to the light source
			3. If there is no object between the intersection point and the light source:
			{
				1. calculate the color of the intersection point.
				2. associate the color of the intersection point to p
			}
		}
	}



Formulas:

	distance from camera to screen:
		(WIDTH / 2) / tan(FOV / 2)
		tan(FOV / 2) = (WIDTH / 2) / adj
		FOV = 2 * (tan-1((WIDTH / 2 ) adj))
	Create new basis vectors from camera:
		basis_X = Orientation Vector rotated around the Y axis (90 degrees, clockwise)
		basis_Y = Cross Product of basis_X and basis_Z (perpendicular to both)
		basis_Z = orientation vector
